#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#define MAX 100
//#define eps 10^-5


void afficher_vect( float x[MAX], int n) 
{
	// Affiche le contenu du vecteur x

	int i;

	for (i = 0; i < n; i++) 
	{	
		printf("%1f\n", x[i]);
	}
}

void afficher_mat(float A[MAX][MAX] , int n) 
{
	// Affiche le contenu de la matrice M
	
	int i,j;
	
	for (i = 0; i < n; i++) 
	{
		for (j = 0; j < n; j++) 
		{
			printf("%.1f\t", A[i][j]);
		}

		printf("\n");
	}
}

void remplir_vect( float x[MAX], int n) 
{
	// Requiert la saisie par l'utilisateur du vecteur x 

	int i;

	for (i = 0; i < n; i++) 
	{
		printf("valeur [%d] : ", i);
	    	if (scanf("%f",&x[i]) !=1) printf("error");
	}
}

void remplir_mat(float A[MAX][MAX], int n) 
{
	// Requiert la saisie par l'utilisateur de la matrice M

	int i, j;
	
	for (i = 0; i < n; i++) 
	{
		for (j = 0; j < n; j++) 
		{
			printf("valeur [%d][%d] : ", i, j);
			    if (scanf("%f",&A[i][j]) !=1) printf("error");
		}
	
		printf("\n");
	}
}



void resol_trig_inf( float A[MAX][MAX], float x[MAX], float b[MAX], int n) 
{	
	// Résout le sytème Ax = b avec A triangulaire inférieure

	int i, k;

	float l;
	
	for (i = 0; i < n; i++) 
	{
		l = 0;

		for (k = 0; k <= i - 1; k++) 
		{	
			l += A[i][k]*x[k];
		}

		x[i] = (b[i] - l)/A[i][i];
	}
}


void resol_trig_sup( float A[MAX][MAX], float x[MAX], float b[MAX], int n) 
{
	// Résout le sytème Ax = b avec A triangulaire supérieure

	int i, k;

	float l;
	
	for (i = n; i >= 0; i--) 
	{
		l = 0;

		for (k = i + 1; k < n; k++) 
		{
			l += A[i][k]*x[k];
		}

		x[i] = (b[i] - l)/A[i][i];
	}
}


void resol_diag(float A[MAX][MAX], float x[MAX], float b[MAX], int n) 
{
	// Résout le sytème Ax = b avec A diagonale

	int i;

	for (i = 0; i < n; i++)
	{
		x[i] = b[i] / A[i][i];
	}
}

void crea_M(flot A[MAX][MAX], float M[MAX][MAX], float x[MAX], int n, float w)
{
	int i, k;
	
	for(k = 0; k < n; k++)
	{
		for(i = 0; i < n; i++)
		{
			if(i == k)
			M[k][k] = A[k][k]/w;
			
			else if (i <= j)
			M[i][k] = - A[i][k];
		
			else
			M[i][k] = 0;
		}
	}
}

float norme2_vect(float x[MAX], int n) 
{
	// Renvoie la norme du vecteur x

	float var = 0;

	int i;

	for (i = 0; i < n; i++)
	{
		var += (x[i]*x[i]);
	}

	p = sqrt(var);

	return p;
}


void residu(float A[MAX][MAX], float x[MAX], float b[MAX], int n, float r[MAX]) 
{
	// Calcule le résidu: r = b - Ax
        
	int k, i;
	float s[MAX];

	for(k = 0; k < n; k++)
	{
		s[k] = 0;

		for(i = 0; i < n; i++)
		{
			s[k] += A[k][i]*x[i];
		}		
		
		r[k] = b[k] - s[k];
	}        
}
	
	
float it_Jacobi(float A[MAX][MAX], float M[MAX][MAX], float x[MAX], float r[MAX], float b[MAX], float e[MAX], int n) 
{
	// Calcule une itération de la méthode de Jacobi: 
	// 1) Calcule le résidu r = b - Ax
	
		residu(A, x, b, n, r); 
	
	// 2) Résout le système Me = r avec M diagonale
	
		resol_diag(A, e, r, n);
	
	// 3) Renvoie la norme du résidu

    		return (norme2_vect(r, n));
}


void resol_Jacobi(float A[MAX][MAX], float x0[MAX], float b[MAX], int n, float eps, float x[MAX])
{
	// Résout le système Ax = b par la méthode de Jacobi
	// Calcule la solution en partant de la valeur initiale x0, jusqu'à la précision eps.

	int k = 0, i, y;

	float r[MAX], e[MAX], y, rayon, ne1, ne;
	float M[MAX][MAX];
	
    for(k = 0; k < n; k++)
    {
    	// On calcule le résidu r, e ainsi que la norme de r : 
    	y = it_Jacobi(A, M, x, r, b, e, n);
    	
    	// On calcule la nouvelle valeur de x :
    	x[k] += e[k];
    	
    	if(y < eps)
    		exit; 
    }	
    
    
    // BONUS: Calcule le rayon spectral des matrices d'itération
 
}
	
	
float it_G_Seidel_SOR(float A[MAX][MAX], float M[MAX][MAX], float x[MAX], float r[MAX], float b[MAX], float e[MAX], int n, float w) 
{
	// Calcule une itération de la méthode de Gauss-Seidel: 
	// 1) Calcule le résidu r = b - Ax
	residu(A, x, b, n, r); 
	
	// 2 - a : Résout le système Me = r avec M = D - E
	if (w == 0)
	resol_trig_inf(A, e, r, n);
	
	// 2 - b : Résout le système Me = r avec M = D - wE
	else if(w != 0) 
	{
		crea_M(A, M, x, n, w);
		resol_trig_sup(M, e, r, n);
	}
	
	else
	{
		printf("Erreur");
		exit 1;
	}
	
	// 3) Renvoie la norme du résidu
	norme2_vect(r, n);        
}	

	
void resol_G_Seidel(float A[MAX][MAX], float x0[MAX], float b[MAX], int n, float eps, float x[MAX]) 
{
	// Résout le système Ax = b par la méthode de Gauss-Seidel
	// Calcule la solution en partant de la valeur initiale x0, jusqu'à la précision eps.
	
	int k = 0, i, j;
	
	float r[MAX], e[MAX], y, ne1, ne, rayon;
	float M[MAX][MAX];
	
	for(k = 0; k < n; k++)
    {
    	// On calcule le résidu r, e ainsi que la norme de r : 
	it_G_Seidel_SOR(A, M, x, r, b, e, n, w);
    	
    	// On calcule la nouvelle valeur de x :
    	x[k] += e[k];
    	
    	if(p < eps)
    		exit; 
    }	
	
	// BONUS: Calcule le rayon spectral des matrices d'itération
	
	
}

	
void resol_SOR(float A[MAX][MAX], float x0[MAX], float b[MAX], int n, float eps, float x[MAX], float w) 
{
	// Résout le système Ax = b par la méthode de Relaxation (SOL)
	// Calcul de la solution en partant de la valeur initiale x0, jusqu'à la précision eps :
	
	int k = 0, i, j;
	
	float r[MAX], e[MAX], y, rayon, ne1, ne;
	float M[MAX][MAX];
	
    for(k = 0; k < n; k++)
    {
    	// On calcule le résidu r, e ainsi que la norme de r : 
	it_G_Seidel_SOR(A, M, x, r, b, e, n, w);
    	
    	// On calcule la nouvelle valeur de x :
    	x[k] += e[k];
    	
    	if(p < eps)
    		exit; 
    }	
	
        
        // BONUS: Calcule le rayon spectral des matrices d'itération

	On rajoute : 
		ne1 = norme2_vect(e, n);
		rayon = ne1/ne; // en+1/en
		ne = ne1;
				dans la boucle. 
		printf("\n Rayon spectral ~  %f \n\n", rayon);
}



int main() 
{
	int n;
	float x1[MAX], x2[MAX], x3[MAX], b[MAX], x0[MAX];

	float A[MAX][MAX], w = 0;
	

	printf("Veuillez entrer la valeur de n : ");
		if (scanf("%d",&n) !=1) printf("error");
	
	printf("\n\n n = 3\n\n");
	n = 3;

	//printf("Veuillez remplir la matrice A : \n");
	//remplir_mat(A , n);

	A[0][0] = 4;
	A[0][1] = -1;
	A[0][2] = 0;
	
	A[1][0] = -1; 
	A[1][1] = 4;
	A[1][2] = -1;
	
	A[2][0] = 0;
	A[2][1] = -2;
	A[2][2] = 4;
	
	printf("Matrice A : \n");
	afficher_mat(A, n);
		
	printf("\n\n---------------------------------------------------------------\n\n");

	//printf("Veuillez remplir le vecteur b : \n");
	//remplir_vect(b,n);
	
	b[0] = 3.0/16;
	b[1] = 4.0/16;
	b[2] = 6.0/16;	

	printf("Vecteur b : \n");
	afficher_vect(b, n);

	printf("\n\n---------------------------------------------------------------\n\n");
	
	
	printf("Veuillez remplir le vecteur x0 : \n");
	remplir_vect(x0, n);
	afficher_vect(x0, n);
	
	printf("\n\n---------------------------------------------------------------\n\n");

	printf("Le vecteur r est : \n");
	afficher_vect(x1, n);

	printf("\n\n---------------------------------------------------------------\n\n");
	
	printf("\n Resolution par la méthode de Jacobi :\n");
	resol_Jacobi(A, x0, b, n, eps, x1);

	// On obtient x pour M = diagonale et eps = 10e-5 :
	printf("\n On obtient x :\n");
	afficher_vect(x1, n);	

	printf("\n\n---------------------------------------------------------------\n\n");
	
 	printf("\n Resolution par la méthode de Gauss-Seidel :\n");
 	resol_G_Seidel(A, x0, b, n, eps, x2);

 	// On obtient x pour M = triangulaire inférieur et eps = 10e-5 :
 	printf("\n On obtient :\n");
 	afficher_vect(x2, n);
 	
 	
 	printf("\n Resolution par la méthode SOR (w = 0 --> 2):\n");
 	
 	for(w = 0.1; w <= 2; w+=0.1)
 	{
  		printf("w = %f     ",w);
  		
 		resol_SOR(A, x0, b, n, eps, x3, w);
 	}

 	// On obtient x pour M = triangulaire supérieur et eps = 10e-5 :
	printf("\n On obtient : \n");
 	afficher_vect(x3,n);
	

	return 0;
}